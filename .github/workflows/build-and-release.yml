name: Build and Release Go Binary

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'

      - name: Build Go binaries for multiple OS and Arch
        run: |
          # Build for Linux
          GOOS=linux GOARCH=amd64 go build -o PZBackup-linux-amd64
          GOOS=linux GOARCH=arm64 go build -o PZBackup-linux-arm64
          # Build for macOS
          GOOS=darwin GOARCH=amd64 go build -o PZBackup-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o PZBackup-darwin-arm64
          # Build for Windows
          GOOS=windows GOARCH=amd64 go build -o PZBackup-windows-amd64.exe
          
          # Move binaries to a safe location outside the repo
          mkdir -p /tmp/binaries
          cp PZBackup-* /tmp/binaries/

      - name: Setup release branch
        run: |
          # Check if release branch exists remotely
          if git ls-remote --heads origin release | grep -q release; then
            # Release branch exists, check it out
            git checkout release
            git pull origin release
          else
            # Release branch doesn't exist, create it
            git checkout --orphan release
          fi
          
          # Remove all files but keep .git directory
          find . -not -path "./.git*" -not -name ".git" -delete
          
          # Copy the binaries from tmp
          cp /tmp/binaries/* .
          
          # Configure Git user for commit
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Add and commit the binaries
          git add PZBackup-*
          git commit -m "Release new version $(date +%Y-%m-%d-%H-%M-%S)"
          
          # Push to release branch
          git push -f origin release